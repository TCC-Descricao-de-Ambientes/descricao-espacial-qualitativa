# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\windows\models\gui\MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication
from models.processing.Process import Process
from models.gui.DialogFactory import DialogFactory
from models.visualizer.Visualizer import Visualizer


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(700, 500)
        MainWindow.setMaximumSize(QtCore.QSize(700, 500))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(40, 50, 601, 81))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setHorizontalSpacing(10)
        self.gridLayout.setVerticalSpacing(20)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton_search = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton_search.setObjectName("pushButton_search")
        self.gridLayout.addWidget(self.pushButton_search, 1, 1, 1, 1)
        self.label = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(21)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.lineEdit_path = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.lineEdit_path.setReadOnly(True)
        self.lineEdit_path.setObjectName("lineEdit_path")
        self.gridLayout.addWidget(self.lineEdit_path, 1, 0, 1, 1)
        self.pushButton_process = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_process.setGeometry(QtCore.QRect(40, 200, 301, 51))
        self.pushButton_process.setObjectName("pushButton_process")
        self.pushButton_show_raw = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_show_raw.setGeometry(QtCore.QRect(360, 200, 281, 23))
        self.pushButton_show_raw.setObjectName("pushButton_show_raw")
        self.pushButton_show_processed = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_show_processed.setGeometry(QtCore.QRect(360, 230, 281, 23))
        self.pushButton_show_processed.setObjectName("pushButton_show_processed")
        self.textEdit_description = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_description.setGeometry(QtCore.QRect(40, 280, 601, 191))
        self.textEdit_description.setReadOnly(True)
        self.textEdit_description.setObjectName("textEdit_description")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # Edições manuais
        self.pushButton_search.clicked.connect(self.select_file)
        self.pushButton_process.clicked.connect(self.process_file)
        self.pushButton_show_processed.clicked.connect(self.show_processed)
        self.pushButton_show_raw.clicked.connect(self.show_raw)
        # Fim edições manuais
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Reconhecimento Espacial Qualitativo"))
        self.pushButton_search.setText(_translate("MainWindow", "Buscar"))
        self.label.setText(_translate("MainWindow", "Escolha um arquivo:"))
        self.pushButton_process.setText(_translate("MainWindow", "Processar Imagem"))
        self.pushButton_show_raw.setText(_translate("MainWindow", "Mostrar imagem original"))
        self.pushButton_show_processed.setText(_translate("MainWindow", "Mostrar imagem processada"))

    def select_file(self):
        dialog = QtWidgets.QFileDialog()
        filename, _ = dialog.getOpenFileName(None, 
                                          "Escolha um arquivo", 
                                          "", 
                                          "Arquivo de imagem (*.jpg)");
        self.lineEdit_path.setText(filename)
        
    def process_file(self):
        filename = self.lineEdit_path.text()
        if filename == '':
            file_not_selected = DialogFactory(title='Erro',
                                              message='Nenhum arquivo selecionado',
                                              type='critical',
                                              ok_button=True)
            file_not_selected.show()
            file_not_selected.wait()
            return
        
        self.textEdit_description.append("Processando...")
        QApplication.processEvents()
        
        self.p = Process(filename)
        description = self.p.run()
        
        if description:
            self.textEdit_description.append("Processado com sucesso")
            self.textEdit_description.append(description)
            
        else:
            failed_dialog = DialogFactory(title='Erro',
                                          message='Um erro desconhecido aconteceu!',
                                          type='critical',
                                          ok_button=True)
            failed_dialog.show()
            failed_dialog.wait()
            return
        
    def show_processed(self):
        try:
            self.p.show()
        except Exception as e:
            failed_dialog = DialogFactory(title='Erro',
                                          message='Imagem não foi processada ainda!',
                                          type='critical',
                                          ok_button=True)
            failed_dialog.show()
            failed_dialog.wait()
            
    def show_raw(self):
        filename = self.lineEdit_path.text()
        if filename == '':
            file_not_selected = DialogFactory(title='Erro',
                                              message='Nenhum arquivo selecionado',
                                              type='critical',
                                              ok_button=True)
            file_not_selected.show()
            file_not_selected.wait()
            return
        
        v = Visualizer(filename)
        v.show()
        
            
    

